package cmatest.marioobjectives;

import ch.idsia.mario.engine.level.Level;
import fr.inria.optimization.cmaes.fitness.IObjectiveFunction;

/**
 * General abstract class that generates a Mario level from a latent
 * vector using a GAN in Python, and then evaluates the level.
 * 
 * Note: to make the most efficient use of the GAN in Python,
 * it would be best if we could send a whole population to
 * the GAN at a time. This interface currently does not make
 * such an operation easy, but we should consider changing the
 * code accordingly if evolving by using the GAN proves to be
 * too slow.
 * @author schrum2
 *
 */
public abstract class MarioLevelObjective implements IObjectiveFunction {

	/**
	 * This will be an important shared method that generates a level from
	 * a latent vector by sending it to the Python program that runs the GAN.
	 * @param z An appropriately sized latent vector for the GAN
	 * @return A level generated by the GAN
	 */
	public static Level levelFromLatentVector(double[] z) {
		return null; // TODO using the CommProcess
	}
	
	@Override
	public double valueOf(double[] z) {
		Level level = levelFromLatentVector(z);
		return valueOf(level);
	}
	
	// Override in child classes to determine how levels are evaluated
	public abstract double valueOf(Level level);

	@Override
	public boolean isFeasible(double[] z) {
		return true; // Is an infeasible latent vector even possible?
	}

}
